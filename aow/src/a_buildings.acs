#define NUM_BUILDINGS NUM_TEAMS * NUM_BUILDING_TYPES

struct Building
{
	bool enabled;
};

struct Building Buildings[NUM_BUILDINGS];
function int FindBuilding(int team, int type) { return team * NUM_TEAMS + type; }
function int BuildingTeam(int b) { return b / NUM_TEAMS; }
function int BuildingType(int b) { return b % NUM_TEAMS; }

function bool BuildingEnabled(int b) { return Buildings[b].enabled; }
function int BuildingTid(int b) { return (BuildingTeam(b) + 1) * 1000 + (BuildingType(b) + 1) * 100; }
function int BuildingHealth(int b) { return GetActorHealth(BuildingTid(b)); }
function int BuildingSpawnHealth(int b) { return BuildingTypeHealth(BuildingType(b)); }
function int BuildingOperational(int b) { return BuildingHealth(b) > 0; }

script aow_init_mct (void)
{
    int tid = ActivatorTid();
	int team = (tid - 1000) / 1000;
	int type = (tid % 1000 - 100) / 100;
	
	int b = FindBuilding(team, type);
	Buildings[b].enabled = true;
	
	int x = GetActorX(0);
	int y = GetActorY(0);
	int z = GetActorZ(0);
	Thing_Remove(0);
	SpawnForced(StrAdd("MasterControlTerminal", TeamName(team)), x, y, z, tid);
	SetActorHealth(tid, BuildingTypeHealth(type));
}

function int BuildingHealthPercentage(int b)
{
	if (IsServer())
		return ifloor(IntDiv(BuildingHealth(b), BuildingSpawnHealth(b)) * 100);
	
	return GetActorSpeed(BuildingTid(b));
}

script aow_syncbuildinghp OPEN
{
	Delay(1);
	while (true)
	{
		for (int b = 0; b < NUM_BUILDINGS; b++)
		{
			if (BuildingEnabled(b))
				SetActorSpeed(BuildingTid(b), BuildingHealthPercentage(b));
		}
		Delay(1);
	}
}



