function bool BuildingEnabled(int team, int type)
{
	return ClassifyActor(BuildingTid(team, type)) != 0;
}

function int BuildingTid(int team, int type)
{
	return (team + 1) * 1000 + (type + 1) * 100;
}

function int BuildingHealth(int team, int type)
{
	if (IsServer())
		return GetActorHealth(BuildingTid(team, type));
		
	return GetActorSpeed(BuildingTid(team, type));
}

function int BuildingHealthPercentage(int team, int type)
{
	return iceil(IntDiv(BuildingHealth(team, type), BuildingTypeHealth(type)) * 100);
}

function int BuildingOperational(int team, int type)
{
	return BuildingHealth(team, type) > 0;
}


function void InitBuildings()
{
	for (int team = 0; team < NUM_TEAMS; team++)
	for (int type = 0; type < NUM_BUILDING_TYPES; type++)
	{
		if (!BuildingEnabled(team, type))
			continue;
		
		ProgramError(StrParam(s:"Building enabled", d:team, d:type));
		if (IsServer())
		{
			int tid = BuildingTid(team, type);
			int x = GetActorX(tid);
			int y = GetActorY(tid);
			int z = GetActorZ(tid);
			Thing_Remove(tid);
			SpawnForced(StrAdd("MasterControlTerminal", TeamName(team)), x, y, z, tid);
			SetActorHealth(tid, BuildingTypeHealth(type));
		}
	}
	
	if (IsServer())
		ACS_ExecuteAlways(aow_syncbuildinghp, 0);
	if (IsClient())
		ACS_ExecuteAlways(aow_basehud, 0);
}


script aow_syncbuildinghp (void)
{
	while (true)
	{
		for (int team = 0; team < NUM_TEAMS; team++)
		for (int type = 0; type < NUM_BUILDING_TYPES; type++)
		{
			if (BuildingEnabled(team, type))
				SetActorSpeed(BuildingTid(team, type), BuildingHealth(team, type));
		}
		Delay(1);
	}
}



