int BuildingPrevHealth[NUM_TEAMS][NUM_BUILDING_TYPES];
int BuildingHids[NUM_TEAMS][NUM_BUILDING_TYPES][4];
int FirstBaseHudTic = true;

script aow_basehud OPEN CLIENTSIDE
{
	for (int team = 0; team < NUM_TEAMS; team++)
	for (int type = 0; type < NUM_BUILDING_TYPES; type++)
	for (int i = 0; i < 4; i++)
		BuildingHids[team][type][i] = NewHid();

	while (true)
	{
		HudResetState();
		HudSetShowToEveryone(true);
		HudSetStayTime(0.03);
		
		int redOnLeft = ConsolePlayerTeam() == TEAM_RED;
		DrawBaseHudSide(TEAM_BLUE, !redOnLeft);
		DrawBaseHudSide(TEAM_RED, redOnLeft);
	
		FirstBaseHudTic = false;
		Delay(1);
	}
}

function str PercentageColorCode(int percentage)
{
	if (percentage > 100)
		return "\ch";
	else if (percentage == 100) // 100%
		return "\cq";
	else if (Percentage > 75) // healthy
		return "\cd";
	else if (Percentage > 50) // moderate
		return "\cf";
	else if (Percentage > 25) // low
		return "\ci";
	else if (Percentage > 0) // critical
		return "\cr";
	return "\cm"; // destroyed
}

int LastAttackAnnouncementTime = INT_MIN;

function void AnnounceAttack(int team, int type)
{
	if (ConsolePlayerTeam() != team)
		return;

	if (Timer() < LastAttackAnnouncementTime + 35 * 15)
		return;
		
	LastAttackAnnouncementTime = Timer();
	AmbientSound(StrParam(s:"attacked/", s:TeamName(team), s:"/", s:BuildingTypeCodeName(type)), 255);
}

function void AnnounceDestruction(int team, int type)
{
	AmbientSound(StrParam(s:"destroyed/", s:TeamName(team)), 255);
}

function int DrawBaseHudSide(int team, int left)
{
	int x = cond(left, HudLeft() + 3.0, HudRight() - 2.0 - 35.0);
	int y = 320.0;
	
	HudSetTextOriginY(HUD_TEXTORIGIN_TOP);

	for (int type = 0; type < NUM_BUILDING_TYPES; type++)
	{
		if (!BuildingEnabled(team, type))
			continue;
			
		int hp1 = BuildingPrevHealth[team][type];
		int hp2 = BuildingHealth(team, type);
		int flash = hp1 != hp2 && !FirstBaseHudTic;
		int flashcolor;
		if (flash)
		{
			if (hp2 > hp1)
				flashcolor = CR_GREEN;
			else if (hp2 <= 0)
			{
				AnnounceDestruction(team, type);
				flashcolor = CR_RED;
			}
			else
			{
				AnnounceAttack(team, type);
				flashcolor = CR_GOLD;
			}
		}
		
		BuildingPrevHealth[team][type] = hp2;
			
		HudSetPoint(x, y);
		HudSetTextOriginX(cond(left, HUD_TEXTORIGIN_LEFT, HUD_TEXTORIGIN_RIGHT));
		if (BuildingOperational(team, type))
			HudSetTextColor(TeamColor(team));
		else
			HudSetTextColor(CR_BLACK);
			
		HudDrawText(BuildingHids[team][type][0], BuildingTypeName(type));
		if (flash)
		{
			HudPushState();
			HudSetDisappearTime(1.0);
			HudSetTextColor(flashcolor);
			HudDrawText(BuildingHids[team][type][1], BuildingTypeName(type));
			HudPopState();
		}
		
		HudSetPoint(x + cond(left, 150.0, 35.0), y);
		HudSetTextOriginX(HUD_TEXTORIGIN_RIGHT);
		HudSetTextColor(CR_WHITE);
		int percent = BuildingHealthPercentage(team, type);
		str percenttext = StrParam(s:PercentageColorCode(percent), d:percent, s:"\c-%");
		HudDrawText(BuildingHids[team][type][2], percenttext);
		if (flash)
		{
			HudPushState();
			HudSetDisappearTime(1.0);
			HudSetTextColor(flashcolor);
			HudDrawText(BuildingHids[team][type][3], StripColorCodes(percenttext));
			HudPopState();
		}
		
		y += 10.0;
	}
}
