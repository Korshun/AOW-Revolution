function void InitMechData(void)
{
	AddMech("Raven", "Raven");
		AddMechWeapon("AC2", "AC2");
		AddMechWeapon("LRM", "LRM x5");
	AddMech("Wolverine", "Wolverine");
	AddMech("MadCat", "Mad Cat");
		AddMechWeapon("ShockCannon", "Dual Shock Cannon");
			SetMechWeaponReload("SHCNRELO", 5 * 35);
		AddMechWeapon("ShockRifle", "Dual Shock Rifles");
		AddMechWeapon("LRM", "LRM 2x10");
			SetMechWeaponReload("LRMRELO", 5 * 35);
	AddMech("Titan", "Titan");
	AddMech("Guardian", "Guardian");
}


// Structure
#define M_Name 0
#define M_Actorname 1
#define M_FirstWeapon 2
#define M_NumWeapons 3
#define M_NUM_PROPS 4

#define MAX_MECHS 8

int Mechs[MAX_MECHS][M_NUM_PROPS];
int NumMechs;


#define MW_Name 0
#define MW_Prefix 1
#define MW_ReloadSound 2
#define MW_ReloadDelay 3
#define MW_NUM_PROPS 4

#define MAX_MECH_WEAPONS 32

int MechWeapons[MAX_MECH_WEAPONS][MW_NUM_PROPS];
int NumMechWeapons;


function void AddMech(str actorname, str name)
{
	if (NumMechs == MAX_MECHS)
		LimitError("MAX_MECHS");
		
	Mechs[NumMechs][M_Actorname] = actorname;
	Mechs[NumMechs][M_Name] = name;
	Mechs[NumMechs][M_FirstWeapon] = NumMechWeapons;
	Mechs[NumMechs][M_NumWeapons] = 0;
	NumMechs++;
}

function void AddMechWeapon(str prefix, str name)
{
	if (NumMechWeapons == MAX_MECH_WEAPONS)
		LimitError("MAX_MECH_WEAPONS");

	MechWeapons[NumMechWeapons][MW_Prefix] = prefix;
	MechWeapons[NumMechWeapons][MW_Name] = name;
	MechWeapons[NumMechWeapons][MW_ReloadDelay] = 0;
	Mechs[NumMechs - 1][M_numWeapons]++;
	NumMechWeapons++;
}

function void SetMechWeaponReload(str reloadSound, int reloadDelay)
{
	MechWeapons[NumMechWeapons - 1][MW_ReloadSound] = reloadSound;
	MechWeapons[NumMechWeapons - 1][MW_ReloadDelay] = reloadDelay;
}

// Accessors
function str MechName(int mech) { return Mechs[mech][M_Name]; }
function str MechActorName(int mech) { return Mechs[mech][M_Actorname]; }
function int MechFirstWeapon(int mech) { return Mechs[mech][M_FirstWeapon]; }
function int MechWeaponCount(int mech) { return Mechs[mech][M_NumWeapons]; }

function str MechWeaponName(int weapon) { return MechWeapons[weapon][MW_Name]; }

// Functions
function bool IdentifyMech(int tid)
{
	for (int i = 0; i < NumMechs; i++)
	{
		if (CheckActorClass(tid, Mechs[i][M_actorname]))
			return i;
	}
	return -1;
}

function bool ActorIsMech(int tid)
{
	return IdentifyMech(tid) != -1;
}

function bool IsMech(void)
{
	return ActorIsMech(0);
}

// DEBUG
script 1 (int mech)
{
	ACS_ExecuteAlways(aow_entermech, 0, mech);
}

script aow_entermech (int mech)
{
	print(s:"Entering mech ", s:MechName(mech));

	if (!MorphActor(0, MechActorName(mech), "", INT_MAX, MRF_WHENINVULNERABLE | MRF_NEWTIDBEHAVIOUR, "", ""))
	{
		print(s:"Morph failed");
		terminate;
	}

	while (IsAlive())
	{
		if (MechWeaponCount(mech) > 2 && KeyPressed(BT_ALTATTACK))
		{
			int weapon = CheckActorInventory(ActivatorTid(), "MechSelectedWeapon");
			weapon = (weapon + 1) % MechWeaponCount(mech);
			print(s:"Switching to ", s:MechWeaponName(weapon));
			SetInventory("MechSelectedWeapon", weapon);
		}
		Delay(1);
	}
}
