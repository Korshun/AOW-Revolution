struct AOWMech
{
	str name;
	str actorname;
	int firstWeapon;
	int numWeapons;
};

struct AOWMechWeapon
{
	str name;
	str prefix;
	fixed reloadDelay;
	str reloadSound;
};

#define MAX_MECHS 8
#define MAX_MECH_WEAPONS 32

int NumMechs = 0;
int NumMechWeapons = 0;
AOWMech Mechs[MAX_MECHS];
AOWMechWeapon MechWeapons[MAX_MECH_WEAPONS];

function void AddMech(str actorname, str name)
{
	if (NumMechs == MAX_MECHS)
		LimitError("MAX_MECHS");
		
	Mechs[NumMechs].actorname = actorname;
	Mechs[NumMechs].name = name;
	Mechs[NumMechs].firstWeapon = NumMechWeapons;
	Mechs[NumMechs].numWeapons = 0;
	NumMechs++;
}

function void AddMechWeapon(str prefix, str name)
{
	if (NumMechWeapons == MAX_MECH_WEAPONS)
		LimitError("MAX_MECH_WEAPONS");

	MechWeapons[NumMechWeapons].prefix = prefix;
	MechWeapons[NumMechWeapons].name = name;
	MechWeapons[NumMechWeapons].reloadDelay = 0;
	Mechs[NumMechs - 1].numWeapons++;
	NumMechWeapons++;
}

function void SetMechWeaponReload(str reloadSound, int reloadDelay)
{
	MechWeapons[NumMechWeapons - 1].reloadSound = reloadSound;
	MechWeapons[NumMechWeapons - 1].reloadDelay = reloadDelay;
}

function bool IdentifyMech(int tid)
{
	for (int i = 0; i < NumMechs; i++)
	{
		if (CheckActorClass(tid, Mechs[i].actorname))
			return i;
	}
	return -1;
}

function bool ActorIsMech(int tid)
{
	return IdentifyMech(tid) != -1;
}

function bool IsMech(void)
{
	return ActorIsMech(0);
}

function str MechName(int mech)
{
	return Mechs[mech].name;
}

function str MechActorName(int mech)
{
	return Mechs[mech].actorName;
}

function int MechWeaponCount(int mech)
{
	return Mechs[mech].numWeapons;
}

function str MechWeaponName(int mech)
{
	return MechWeapons[mech].name;
}

function void InitMechs(void)
{
	AddMech("Raven", "Raven");
	AddMech("Wolverine", "Wolverine");
	AddMech("MadCat", "Mad Cat");
		AddMechWeapon("ShockCannon", "Dual Shock Cannon");
			SetMechWeaponReload("SHCNRELO", 5 * 35);
		AddMechWeapon("ShockRifle", "Dual Shock Rifles");
		AddMechWeapon("LRM", "LRM 2x10");
			SetMechWeaponReload("LRMRELO", 5 * 35);
	AddMech("Titan", "Titan");
	AddMech("Guardian", "Guardian");
}

// DEBUG
script 1 (int mech)
{
	ACS_ExecuteAlways(aow_entermech, 0, mech);
}

script aow_entermech (int mech)
{
	print(s:"Entering mech ", s:MechName(mech));

	if (!MorphActor(0, MechActorName(mech), "", INT_MAX, MRF_WHENINVULNERABLE | MRF_NEWTIDBEHAVIOUR, "", ""))
	{
		print(s:"Morph failed");
		terminate;
	}

	while (IsAlive())
	{
		if (MechWeaponCount(mech) > 2 && KeyPressed(BT_ALTATTACK))
		{
			int weapon = CheckInventory("MechSelectedWeapon");
			weapon = (weapon + 1) % MechWeaponCount(mech);
			print(s:"Switching to ", s:MechWeaponName(weapon));
			SetInventory("MechSelectedWeapon", weapon);
		}
		Delay(1);
	}
}
