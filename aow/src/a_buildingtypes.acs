enum
{
	BUILDING_BARRACKS,
	BUILDING_REFINERY,
	BUILDING_RESCENTER,
	BUILDING_FACTORY,
	BUILDING_REPAIR,
	BUILDING_OBELISK,
	
	NUM_BUILDING_TYPES
};

function void InitBuildingTypeData(void)
{
	AddBuildingType(BUILDING_BARRACKS, 20000, "barracks", "Barracks");
	AddBuildingType(BUILDING_REFINERY, 30000, "refinery", "Refinery");
	AddBuildingType(BUILDING_RESCENTER, 20000,	"rescenter", "Research Center");
	AddBuildingType(BUILDING_FACTORY, 30000, "factory", "War Factory");
	AddBuildingType(BUILDING_REPAIR, 15000, "repair", "Repair Facility");
	AddBuildingType(BUILDING_OBELISK, 15000, "obelisk", "Obelisk of Light");
	FinishBuildingTypes();
}


// Structure
struct AOWBuildingType
{
	str codename;
	str name;
	int health;
}

AOWBuildingType BuildingTypes[NUM_BUILDING_TYPES];
int NumBuildingTypes;

function void AddBuildingType(int id, int health, int codename, int name)
{
	BuildingTypes[id].codename = codename;
	BuildingTypes[id].name = name;
	BuildingTypes[id].health = health;
	NumBuildingTypes++;
}

function void FinishBuildingTypes(void)
{
	if (NumBuildingTypes != NUM_BUILDING_TYPES)
		ProgramError(StrParam(s:"NUM_BUILDING_TYPES is ", d:NUM_BUILDING_TYPES, s:" but ", d:NumBuildingTypes, s:" data elements defined"));
}


// Accessors
function str BuildingTypeCodename(int type) { return BuildingTypes[type].codename; }
function str BuildingTypeName(int type) { return BuildingTypes[type].name; }
function int BuildingTypeHealth(int type) { return BuildingTypes[type].health; }	
