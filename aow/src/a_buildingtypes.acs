#define BUILDING_BARRACKS 0
#define BUILDING_REFINERY 1
#define BUILDING_RESCENTER 2
#define BUILDING_FACTORY 3
#define BUILDING_REPAIR 4
#define BUILDING_OBELISK 5
#define NUM_BUILDING_TYPES 6

function void InitBuildingTypeData(void)
{
	AddBuildingType(BUILDING_BARRACKS, 20000, "barracks", "Barracks");
	AddBuildingType(BUILDING_REFINERY, 30000, "refinery", "Refinery");
	AddBuildingType(BUILDING_RESCENTER, 20000,	"rescenter", "Research Center");
	AddBuildingType(BUILDING_FACTORY, 30000, "factory", "War Factory");
	AddBuildingType(BUILDING_REPAIR, 15000, "repair", "Repair Facility");
	AddBuildingType(BUILDING_OBELISK, 15000, "obelisk", "Obelisk of Light");
	FinishBuildingTypes();
}


// Structure
#define BTYPE_Codename 0
#define BTYPE_Name 1
#define BTYPE_Health 2
#define BTYPE_NUM_PROPS 3

int BuildingTypes[NUM_BUILDING_TYPES][BTYPE_NUM_PROPS];
int NumBuildingTypes;

function void AddBuildingType(int id, int health, int codename, int name)
{
	BuildingTypes[id][BTYPE_Codename] = codename;
	BuildingTypes[id][BTYPE_Name] = name;
	BuildingTypes[id][BTYPE_Health] = health;
	NumBuildingTypes++;
}

function void FinishBuildingTypes(void)
{
	if (NumBuildingTypes != NUM_BUILDING_TYPES)
		printbold(s:"NUM_BUILDING_TYPES is ", d:NUM_BUILDING_TYPES, s:" but ", d:NumBuildingTypes, s:" data elements defined");
}


// Accessors
function str BuildingTypeCodename(int type) { return BuildingTypes[type][BTYPE_Codename]; }
function str BuildingTypeName(int type) { return BuildingTypes[type][BTYPE_Name]; }
function int BuildingTypeHealth(int type) { return BuildingTypes[type][BTYPE_Health]; }	
